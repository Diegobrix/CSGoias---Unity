//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/scripts/inputs/actionsMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ActionsMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ActionsMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""actionsMap"",
    ""maps"": [
        {
            ""name"": ""playerMoves1"",
            ""id"": ""05dce5f5-9968-4b3d-93cc-9f6a8436b0f2"",
            ""actions"": [
                {
                    ""name"": ""movement"",
                    ""type"": ""Value"",
                    ""id"": ""d0fec088-568b-417b-8979-e68f62f9eda3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""b261657e-8766-4f7e-b296-a0de18f0822d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""view"",
                    ""type"": ""Value"",
                    ""id"": ""2c73720b-cb77-4494-addc-87b5fa42b1df"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""keyboardWASD"",
                    ""id"": ""f7fccea4-368d-46b9-9e0a-39dee89a0afb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""85360307-9812-4dd5-aeb4-673af0648b0d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ac9410c3-a31b-47ca-b7cd-053e8fe31126"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1c4fbe92-9642-42d7-bbda-a032c349b09c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""597cfabe-b7cd-49b7-b5c2-e146373e7109"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c282a35c-2cf5-42ba-bca5-a439d7060da3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3fb2d7c2-010a-4bea-af8c-b3335cbf3cad"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""view"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // playerMoves1
        m_playerMoves1 = asset.FindActionMap("playerMoves1", throwIfNotFound: true);
        m_playerMoves1_movement = m_playerMoves1.FindAction("movement", throwIfNotFound: true);
        m_playerMoves1_jump = m_playerMoves1.FindAction("jump", throwIfNotFound: true);
        m_playerMoves1_view = m_playerMoves1.FindAction("view", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // playerMoves1
    private readonly InputActionMap m_playerMoves1;
    private IPlayerMoves1Actions m_PlayerMoves1ActionsCallbackInterface;
    private readonly InputAction m_playerMoves1_movement;
    private readonly InputAction m_playerMoves1_jump;
    private readonly InputAction m_playerMoves1_view;
    public struct PlayerMoves1Actions
    {
        private @ActionsMap m_Wrapper;
        public PlayerMoves1Actions(@ActionsMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @movement => m_Wrapper.m_playerMoves1_movement;
        public InputAction @jump => m_Wrapper.m_playerMoves1_jump;
        public InputAction @view => m_Wrapper.m_playerMoves1_view;
        public InputActionMap Get() { return m_Wrapper.m_playerMoves1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMoves1Actions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMoves1Actions instance)
        {
            if (m_Wrapper.m_PlayerMoves1ActionsCallbackInterface != null)
            {
                @movement.started -= m_Wrapper.m_PlayerMoves1ActionsCallbackInterface.OnMovement;
                @movement.performed -= m_Wrapper.m_PlayerMoves1ActionsCallbackInterface.OnMovement;
                @movement.canceled -= m_Wrapper.m_PlayerMoves1ActionsCallbackInterface.OnMovement;
                @jump.started -= m_Wrapper.m_PlayerMoves1ActionsCallbackInterface.OnJump;
                @jump.performed -= m_Wrapper.m_PlayerMoves1ActionsCallbackInterface.OnJump;
                @jump.canceled -= m_Wrapper.m_PlayerMoves1ActionsCallbackInterface.OnJump;
                @view.started -= m_Wrapper.m_PlayerMoves1ActionsCallbackInterface.OnView;
                @view.performed -= m_Wrapper.m_PlayerMoves1ActionsCallbackInterface.OnView;
                @view.canceled -= m_Wrapper.m_PlayerMoves1ActionsCallbackInterface.OnView;
            }
            m_Wrapper.m_PlayerMoves1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @movement.started += instance.OnMovement;
                @movement.performed += instance.OnMovement;
                @movement.canceled += instance.OnMovement;
                @jump.started += instance.OnJump;
                @jump.performed += instance.OnJump;
                @jump.canceled += instance.OnJump;
                @view.started += instance.OnView;
                @view.performed += instance.OnView;
                @view.canceled += instance.OnView;
            }
        }
    }
    public PlayerMoves1Actions @playerMoves1 => new PlayerMoves1Actions(this);
    public interface IPlayerMoves1Actions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnView(InputAction.CallbackContext context);
    }
}
